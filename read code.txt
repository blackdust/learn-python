# Single line comments start with a number symbol.

""" Multiline strings can be written
    using three "s, and are often used    
    as comments
"""
#多行注释 [赞同]

####################################################
## 1. Primitive Datatypes and Operators
####################################################

# You have numbers
3  # => 3

# Math is what you would expect
1 + 1  # => 2
8 - 1  # => 7
10 * 2  # => 20
35 / 5  # => 7
#四则运算 [赞同]

# Division is a bit tricky. It is integer division and floors the results
# automatically.
5 / 2  # => 2
#即使除不尽也为整数 [赞同，有补充]
# 实际上是 5 / 2 = 2.5 然后向下取整，得到 2。（如果是向上取整就会得到 3）

# To fix division we need to learn about floats.
2.0     # This is a float
11.0 / 4.0  # => 2.75 ahhh...much better
#小数除以小数无法除尽会一直用小数 最多保持到15位[赞同，有补充]
# 两个数字中有一个是小数，结果就是小数，比如 5 / 2.0 = 2.5

# Result of integer division truncated down both for positive and negative. 
5 // 3     # => 1
5.0 // 3.0 # => 1.0 # works on floats too
-5 // 3  # => -2
-5.0 // 3.0 # => -2.0
#双斜杠为整除，要是分子或者分母存在一个小数即使除不尽小数位会变成。0 整除时候会向下取整 单斜杠会给出真实的浮点 [这个理解需要调整]
# 参考链接 -  http://stackoverflow.com/questions/183853/in-python-what-is-the-difference-between-and-when-used-for-division#

# Modulo operation
7 % 3 # => 1
#取余 [赞同]

# Exponentiation (x to the yth power)
2**4 # => 16
#2的四次方 [赞同]

# Enforce precedence with parentheses
(1 + 3) * 2  # => 8
#括号优先级 [赞同]

# Boolean Operators
# Note "and" and "or" are case-sensitive
True and False #=> False
False or True #=> True
#真和假为假  假或真为真 [赞同]

# Note using Bool operators with ints
           
0 == False #=> True         数字0代表假 [这个理解需要调整]
2 == True #=> False         2不代表真也不代表假 [这个理解需要调整]
1 == True #=> True          1代表真 [这个理解需要调整]
# 参考链接 - http://stackoverflow.com/questions/5119709/true-and-false-in-python
# 可以请宋亮给出讲解

# negate with not
not True  # => False
not False  # => True
# not为取反

# Equality is ==
1 == 1  # => True
2 == 1  # => False
# ==表示判断是否相等
# Inequality is !=
1 != 1  # => False
2 != 1  # => True
# 判断是否不等
# More comparisons
1 < 10  # => True
1 > 10  # => False
2 <= 2  # => True
2 >= 2  # => True
# 大于小于大于等于小于等于

# Comparisons can be chained!
1 < 2 < 3  # => True
2 < 3 < 2  # => False
# 连接的判断符
# Strings are created with " or '
"This is a string."
'This is also a string.'
#两种都是合法的 [赞同]

# Strings can be added too!
"Hello " + "world!"  # => "Hello world!"
#字符串的连接操作 [赞同]

# ... or multiplied
"Hello" * 3  # => "HelloHelloHello"
#复制三次Hello字符串 [赞同，有补充]
# 复制三份 Hello 字符串，并把它们连接在一起

# A string can be treated like a list of characters
"This is a string"[0]  # => 'T'
#字符串的位置0是T [赞同]

# % can be used to format strings, like this:
"%s can be %s" % ("strings", "interpolated")
#%s可以指代字符串 [这个理解需要调整]
# 用 " %s %s " % (x, y) 这种语法，
# 可以以 x 替换 " %s %s " 字符串中的第一个 %s，x 可以是各种类型的变量，不限于字符串类型
# 并且以 y 替换 " %s %s " 字符串中的第二个 %s，y 可以是各种类型的变量，不限于字符串类型

# A newer way to format strings is the format method.
# This method is the preferred way
"{0} can be {1}".format("strings", "formatted")
#str.format()函数 是字符串直接可以打点调用的函数 括号里会有 1{0}{1}...2{}{}..3{name}{word}...  等等占位符 在之后的打括号里会进行赋值

# You can use keywords if you don't want to count.
"{name} wants to eat {food}".format(name="Bob", food="lasagna")
#{}内字符可以替换 大括号内的字符可以在小括号内被赋值
# 请仔细描述上述语句究竟是以什么替换了什么？

# None is an object
None  # => None
# 是否理解 “None 是一个对象” 这句话？[可以请宋亮给出讲解]

# Don't use the equality "==" symbol to compare objects to None
# Use "is" instead
"etc" is None  # => False
None is None  # => True
#用is去比较None对象 [可以请宋亮给出讲解]  比较类型

# The 'is' operator tests for object identity. This isn't
# very useful when dealing with primitive values, but is
# very useful when dealing with objects.

# None, 0, and empty strings/lists all evaluate to False.
# All other values are True
bool(0)  # => False
bool("")  # => False
#None，0，和空字符串/列表评估为false 其他的是真的

####################################################
## 2. Variables and Collections
####################################################

# Python has a print statement, in all 2.x versions but removed from 3.
print "I'm Python. Nice to meet you!"
# 这里为何没有写？需要明确 print statement 与 print function 的区别。
# Python also has a print function, available in versions 2.7 and 3...
# but for 2.7 you need to add the import (uncommented):    
# from __future__ import print_function
print("I'm also Python! ")
#  2.7版本调用from __future__ import print_function 才能使用print  版本3中ishi语句

# No need to declare variables before assigning to them.
some_var = 5    # Convention is to use lower_case_with_underscores
some_var  # => 5
#python里面使用变量前不需要声明 [赞同]
# Accessing a previously unassigned variable is an exception.  访问一个以前未分配的变量是例外

# See Control Flow to learn more about exception handling.     看控制流去了解更多的异常处理
some_other_var  # Raises a name error=
# if can be used as an expression
"yahoo!" if 3 > 2 else 2  # => "yahoo!"                       疑惑： 这段代码不知所云
# [可以请宋亮给出讲解]




# Lists store sequences
li = []
# You can start with a prefilled list
other_li = [4, 5, 6]
# 建立一个列表 [赞同]

# Add stuff to the end of a list with append
li.append(1)    # li is now [1]
li.append(2)    # li is now [1, 2]
li.append(4)    # li is now [1, 2, 4]
li.append(3)    # li is now [1, 2, 4, 3]       往第一项加数据 [这个理解需要调整]
# li 最初是一个空白的列表，append 做的动作，不是往第一项里加数据，
# 而是不断在当前列表的基础上，追加一项数据。

# Remove from the end with pop
li.pop()        # => 3 and li is now [1, 2, 4] 删除最后一项 [赞同]

# Let's put it back
li.append(3)    # li is now [1, 2, 4, 3] again.
# 可以看出 pop 与 append 两个函数，都是对列表的末端做处理。

# Access a list like you would any array
li[0]  # => 1
# 这里为何没有写？ 访问列表中的元素

# Assign new values to indexes that have already been initialized with =
li[0] = 42
li[0]  # => 42       列表是可以往其中一项改变元素 [赞同]

li[0] = 1  # Note: setting it back to the original value
# 这里为何没有写？试着写出来更好。

# Look at the last element
li[-1]  # => 读取倒数第一个元素[这个理解需要调整]
# -1 是从列表的末端取元素，而且 -1,-2,-3 分别取得倒数第一，倒数第二，倒数第三个元素

# Looking out of bounds is an IndexError
li[4]  # Raises an IndexError    在索引外面访问会产生错误 [这个理解需要调整]
# 索引外面是指什么的外面，这个说法还不够清晰。 
  
# You can look at ranges with slice syntax.
# (It's a closed/open range for you mathy types.)
li[1:3]  # => [2, 4]  二位开始到第四位前 2 3 [赞同]

# Omit the beginning
li[2:]  # => [4, 3]   第三位开始到结束  3 4 [赞同]

# Omit the end
li[:3]  # => [1, 2, 4] 从第1一位开始到第四位前 [赞同]

# Select every second entry
li[::2]   # =>[1, 4]          分片后取第二个元素

# Revert the list
li[::-1]   # => [3, 4, 2, 1]  是把表反过来 1243

# Use any combination of these to make advanced slices
# li[start:end:step]   疑惑：常见的一般都是【start：end】  step是什么意思  隔n位
# 可以请宋亮给出讲解


# Remove arbitrary elements from a list with "del" 删除列表里元素
del li[2]   # li is now [1, 2, 3]
# 删除的是哪个位置的元素？ 第三个

# You can add lists
li + other_li   # => [1, 2, 3, 4, 5, 6]
# Note: values for li and for other_li are not modified. 链接两个表 两个表本身不会变 [赞同]
   
# Concatenate lists with "extend()"                      使得li表添加连接 ，本身改变 [赞同]

li.extend(other_li)   # Now li is [1, 2, 3, 4, 5, 6]      

# Check for existence in a list with "in"                检查表内含有元素 [赞同]
1 in li   # => True

# Examine the length with "len()"                        检查长度 [赞同]
len(li)   # => 6

# Tuples are like lists but are immutable.                元组像是列表 但是是不可变的 （） [赞同]
tup = (1, 2, 3)
tup[0]   # => 1
tup[0] = 3  # Raises a TypeError                           不可赋值 [赞同]
# You can do all those list thingies on tuples too         求长度 访问一段 验证其中的元素 [赞同，有补充]
# 还有连接的操作
len(tup)   # => 3                                           
tup + (4, 5, 6)   # => (1, 2, 3, 4, 5, 6)
tup[:2]   # => (1, 2)
2 in tup   # => True

# You can unpack tuples (or lists) into variables
a, b, c = (1, 2, 3)     # a is now 1, b is now 2 and c is now 3   使得一些变量被元素赋值

# Tuples are created by default if you leave out the parentheses
d, e, f = 4, 5, 6
# 这里为何没有写？

# Now look how easy it is to swap two values
e, d = d, e     # d is now 5 and e is now 4                                  交换 [赞同，有补充]
# 要写明是两个变量的取值呼唤，这个比 C 语言中的互换写法更简单

# Dictionaries store mappings                                          字典的存储 [赞同，有补充]
# 如果还不熟悉字典类型，请专门熟悉一下。
empty_dict = {}
# Here is a prefilled dictionary                                  
filled_dict = {"one": 1, "two": 2, "three": 3}

# Look up values with []
filled_dict["one"]   # => 1                filled_dict["one"]   指代1 [赞同，有补充]
# 字典的引用方法，或者说只要给出一个有效的 key ，就可以获得对应于这个 key 的 value




1月28号更新：

# Get all keys as a list with "keys()"
filled_dict.keys()   # => ["three", "two", "one"]
# Note - Dictionary key ordering is not guaranteed. 获得字典的键 但是不保证顺序
# Your results might not match this exactly.

# Get all values as a list with "values()"
filled_dict.values()   # => [3, 2, 1]               获得字典的值 值得顺序和获得字典的键的顺序是一样的
# Note - Same as above regarding key ordering.

# Check for existence of keys in a dictionary with "in"  用in去验证里面的元素
"one" in filled_dict   # => True
1 in filled_dict   # => False

# Looking up a non-existing key is a KeyError             访问一个没有的键 会显示keyerror
filled_dict["four"]   # KeyError

# Use "get()" method to avoid the KeyError                用get方法避免error 当没有那个键时返回none
filled_dict.get("one")   # => 1
filled_dict.get("four")   # => None
# The get method supports a default argument when the value is missing    get用于得到值 支持默认参数当代表的值丢失时
filled_dict.get("one", 4)   # => 1
filled_dict.get("four", 4)   # => 4
# note that filled_dict.get("four") is still => None                      dict.get(key, default=None) 找不到时候返回default
# (get doesn't set the value in the dictionary)

# set the value of a key with a syntax similar to lists                     可以直接赋值一个值
filled_dict["four"] = 4  # now, filled_dict["four"] => 4

# "setdefault()" inserts into a dictionary only if the given key isn't present            setdefault方法添加key和值
filled_dict.setdefault("five", 5)  # filled_dict["five"] is set to 5
filled_dict.setdefault("five", 6)  # filled_dict["five"] is still 5

# Sets store ... well sets (which are like lists but can contain no duplicates)           set是一种数据类型 无序集合
empty_set = set()
# Initialize a "set()" with a bunch of values                                             不重复元素
some_set = set([1, 2, 2, 3, 4])   # some_set is now set([1, 2, 3, 4])

# order is not guaranteed, even though it may sometimes look sorted                      无法保证顺序
another_set = set([4, 3, 2, 2, 1])  # another_set is now set([1, 2, 3, 4])          

# Since Python 2.7, {} can be used to declare a set                                      2.7里{}是表示和判断set集合的
filled_set = {1, 2, 2, 3, 4}   # => {1, 2, 3, 4}

# Add more items to a set  往set集合里添加元素
filled_set.add(5)   # filled_set is now {1, 2, 3, 4, 5}                                       

# Do set intersection with &             用&找出交集
other_set = {3, 4, 5, 6}
filled_set & other_set   # => {3, 4, 5}

# Do set union with |                    |找出并集
filled_set | other_set   # => {1, 2, 3, 4, 5, 6}

# Do set difference with -               -是集合的减法
{1, 2, 3, 4} - {2, 3, 5}   # => {1, 4}

# Check for existence in a set with in      用in 来判断是否含有元素
2 in filled_set   # => True
10 in filled_set   # => False


####################################################
## 3. Control Flow
####################################################

# Let's just make a variable
some_var = 5

# Here is an if statement. Indentation is significant in python!
# prints "some_var is smaller than 10"
if some_var > 10:
    print("some_var is totally bigger than 10.")
elif some_var < 10:    # This elif clause is optional.
    print("some_var is smaller than 10.")
else:           # This is optional too.
    print("some_var is indeed 10.")

"""
For loops iterate over lists
prints:
    dog is a mammal
    cat is a mammal
    mouse is a mammal
"""
for animal in ["dog", "cat", "mouse"]:
    # You can use % to interpolate formatted strings      for后的变量赋值 分别被赋值为之后那个列表的可以用%指代
    print("%s is a mammal" % animal)

"""
"range(number)" returns a list of numbers
from zero to the given number
prints:
    0
    1
    2
    3
"""
for i in range(4):
    print(i)

"""
While loops go until a condition is no longer met.
prints:
    0
    1
    2
    3
"""
x = 0
while x < 4:
    print(x)
    x += 1  # Shorthand for x = x + 1

# Handle exceptions with a try/except block  异常处理

# Works on Python 2.6 and up:
try:
    # Use "raise" to raise an error
    raise IndexError("This is an index error")#??????????????????????? 刻意制造异常
except IndexError as e:
    pass    # Pass is just a no-op. Usually you would do recovery here.
except (TypeError, NameError):
    pass    # Multiple exceptions can be handled together, if required.
else:   # Optional clause to the try/except block. Must follow all except blocks
    print "All good!"   # Runs only if the code in try raises no exceptions

try:
<语句>        #运行别的代码
except <a>：
<语句>        #如果在try部份引发了'a'异常 执行这个语句
except <b>，<数据>:
<语句>        #如果引发了'b'异常，获得附加的数据
else:
<语句>        #如果没有异常发生
"""


try-finally 语句无论是否发生异常都将执行最后的代码。

try:
<语句>
finally:
<语句>    #退出try时总会执行
raise


try:
     s = None
     if s is None:
         print "s 是空对象"
         raise NameError     #如果引发NameError异常，try部分后面的代码将不能执行
......
......


Python中函数是可以返回多个值的，如果返回多个值，会将多个值放在一个元组或者其他类型的集合中来返回
####################################################
## 4. Functions
####################################################

# Use "def" to create new functions   def建立函数
def add(x, y):
    print("x is %s and y is %s" % (x, y))
    return x + y    # Return values with a return statement

# Calling functions with parameters     调用函数
add(5, 6)   # => prints out "x is 5 and y is 6" and returns 11

# Another way to call functions is with keyword arguments 要是实参有和形参一样的变量的赋值 ，可以匹配
add(y=6, x=5)   # Keyword arguments can arrive in any order.

# You can define functions that take a variable number of
# positional args, which will be interpreted as a tuple if you do not use the * *  星号后面可以跟多个参数
def varargs(*args):
    return args

varargs(1, 2, 3)   # => (1, 2, 3)                                             
 #用*生成的参数返回的是元组

# You can define functions that take a variable number of
# keyword args, as well, which will be interpreted as a map if you do not use **
def keyword_args(**kwargs):
    return kwargs

# Let's call it to see what happens
keyword_args(big="foot", loch="ness")   # =>  用**导入了一个字典 {"big": "foot", "loch": "ness"}**对赋值输入比较敏感

# You can do both at once, if you like 
def all_the_args(*args, **kwargs):
    print(args)
    print(kwargs)
"""
all_the_args(1, 2, a=3, b=4) prints:          #即生成了元组又生成了字典
    (1, 2)
    {"a": 3, "b": 4}
"""

# When calling functions, you can do the opposite of args/kwargs!
# Use * to expand positional args and use ** to expand keyword args.
args = (1, 2, 3, 4)
kwargs = {"a": 3, "b": 4}
all_the_args(*args)   # equivalent to foo(1, 2, 3, 4)
all_the_args(**kwargs)   # equivalent to foo(a=3, b=4)
all_the_args(*args, **kwargs)   # equivalent to foo(1, 2, 3, 4, a=3, b=4)

# you can pass args and kwargs along to other functions that take args/kwargs
# by expanding them with * and ** respectively
def pass_all_the_args(*args, **kwargs):
    all_the_args(*args, **kwargs)
    print varargs(*args)
    print keyword_args(**kwargs)

# Function Scope      成员变量和全局变量                                                           
x = 5

def setX(num):
    # Local var x not the same as global variable x
    x = num # => 43
    print x # => 43
    
def setGlobalX(num):
    global x
    print x # => 5
    x = num # global var x is now set to 6
    print x # => 6

setX(43)
setGlobalX(6)

# Python has first class functions  python里的函数分级别
def create_adder(x):
    def adder(y):
        return x + y
    return adder

add_10 = create_adder(10)
add_10(3)   # => 13


lambda语句中，冒号前是参数，可以有多个，用逗号隔开，冒号右边的返回值。lambda语句构建的其实是一个函数对象
# There are also anonymous functions
(lambda x: x > 2)(3)   # => True

# There are built-in higher order functions                            map语句和filter语句的用法
map(add_10, [1, 2, 3])   # => [11, 12, 13]
filter(lambda x: x > 5, [3, 4, 5, 6, 7])   # => [6, 7]

# We can use list comprehensions for nice maps and filters
[add_10(i) for i in [1, 2, 3]]  # => [11, 12, 13]
[x for x in [3, 4, 5, 6, 7] if x > 5]   # => [6, 7]

####################################################
## 5. Classes
####################################################

# We subclass from object to get a class.
class Human(object):

    # A class attribute. It is shared by all instances of this class
    species = "H. sapiens"

    # Basic initializer, this is called when this class is instantiated.
    # Note that the double leading and trailing underscores denote objects
    # or attributes that are used by python but that live in user-controlled
    # namespaces. You should not invent such names on your own.
    def __init__(self, name):
        # Assign the argument to the instance's name attribute
        self.name = name

    # An instance method. All methods take "self" as the first argument
    def say(self, msg):
        return "%s: %s" % (self.name, msg)

    # A class method is shared among all instances
    # They are called with the calling class as the first argument
    @classmethod
    def get_species(cls):
        return cls.species

    # A static method is called without a class or instance reference
    @staticmethod
    def grunt():
        return "*grunt*"

# Instantiate a class
i = Human(name="Ian")
print(i.say("hi"))     # prints out "Ian: hi"

j = Human("Joel")
print(j.say("hello"))  # prints out "Joel: hello"

# Call our class method
i.get_species()   # => "H. sapiens"

# Change the shared attribute
Human.species = "H. neanderthalensis"
i.get_species()   # => "H. neanderthalensis"
j.get_species()   # => "H. neanderthalensis"

# Call the static method
Human.grunt()   # => "*grunt*"

####################################################
## 6. Modules
####################################################

# You can import modules
import math
print(math.sqrt(16))  # => 4

# You can get specific functions from a module
from math import ceil, floor
print(ceil(3.7))  # => 4.0
print(floor(3.7))   # => 3.0

# You can import all functions from a module.
# Warning: this is not recommended
from math import *

# You can shorten module names
import math as m
math.sqrt(16) == m.sqrt(16)   # => True
# you can also test that the functions are equivalent
from math import sqrt
math.sqrt == m.sqrt == sqrt  # => True

# Python modules are just ordinary python files. You
# can write your own, and import them. The name of the
# module is the same as the name of the file.

# You can find out which functions and attributes
# defines a module.
import math
dir(math)

####################################################
## 7. Advanced
####################################################

# Generators help you make lazy code
def double_numbers(iterable):
    for i in iterable:
        yield i + i

# A generator creates values on the fly.
# Instead of generating and returning all values at once it creates one in each
# iteration.  This means values bigger than 15 wont be processed in
# double_numbers.
# Note xrange is a generator that does the same thing range does.
# Creating a list 1-900000000 would take lot of time and space to be made.
# xrange creates an xrange generator object instead of creating the entire list
# like range does.
# We use a trailing underscore in variable names when we want to use a name that
# would normally collide with a python keyword
xrange_ = xrange(1, 900000000)

# will double all numbers until a result >=30 found
for i in double_numbers(xrange_):
    print(i)
    if i >= 30:
        break

# Decorators
# in this example beg wraps say
# Beg will call say. If say_please is True then it will change the returned
# message
from functools import wraps

def beg(target_function):
    @wraps(target_function)
    def wrapper(*args, **kwargs):
        msg, say_please = target_function(*args, **kwargs)
        if say_please:
            return "{} {}".format(msg, "Please! I am poor :(")
        return msg

    return wrapper

@beg
def say(say_please=False):
    msg = "Can you buy me a beer?"
    return msg, say_please

print(say())  # Can you buy me a beer?
print(say(say_please=True))  # Can you buy me a beer? Please! I am poor :(
